steps:
  # Step 1: Get environment variables from existing Cloud Run service
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-env-vars'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Getting environment variables from Cloud Run service..."

        # Get environment variables from the existing service in YAML format
        gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format="get(spec.template.spec.template.spec.containers[0].env)" > /workspace/env_raw.txt 2>/dev/null || echo "[]" > /workspace/env_raw.txt

        echo "Raw environment data:"
        cat /workspace/env_raw.txt

        # Extract environment variables using a more robust method
        gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format="value(spec.template.spec.template.spec.containers[0].env[].name,spec.template.spec.template.spec.containers[0].env[].value)" > /workspace/env_pairs.txt 2>/dev/null || touch /workspace/env_pairs.txt

        echo "Environment pairs:"
        cat /workspace/env_pairs.txt

        # Convert to build env format (YAML format for --build-env-vars-file)
        # Start with an empty YAML map
        echo "{}" > /workspace/build_env.yaml

        # Check if we have any meaningful environment variables
        # Remove empty lines and whitespace-only lines, then check if anything remains
        grep -v '^[[:space:]]*$' /workspace/env_pairs.txt > /workspace/env_clean.txt 2>/dev/null || touch /workspace/env_clean.txt

        if [[ -s /workspace/env_clean.txt ]]; then
          echo "Found environment variables, converting to YAML..."
          # Create proper YAML format - start with empty map and add variables
          echo "{}" > /workspace/build_env.yaml

          # Track if we actually add any variables
          vars_added=false

          while IFS= read -r line; do
            if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*$ ]]; then
              if [[ "$line" =~ ^[A-Z_][A-Z0-9_]*$ ]]; then
                # This is a variable name, read the next line for value
                var_name="$line"
                if read -r var_value; then
                  # If this is the first variable, start with proper YAML structure
                  if [[ "$vars_added" == "false" ]]; then
                    echo "# Build environment variables" > /workspace/build_env.yaml
                    vars_added=true
                  fi
                  # Escape special characters for YAML and quote the value
                  escaped_value=$(printf '%s\n' "$var_value" | sed 's/"/\\"/g')
                  echo "${var_name}: \"${escaped_value}\"" >> /workspace/build_env.yaml
                fi
              fi
            fi
          done < /workspace/env_clean.txt

          # If no variables were actually added, ensure we have valid YAML
          if [[ "$vars_added" == "false" ]]; then
            echo "{}" > /workspace/build_env.yaml
          fi
        else
          echo "No environment variables found, using empty YAML map"
          echo "{}" > /workspace/build_env.yaml
        fi

        echo "Final build environment file:"
        cat /workspace/build_env.yaml

  # Step 2: Deploy to Cloud Run using source-based deployment with extracted env vars
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if we have environment variables to pass
        # Look for actual key-value pairs, not just comments or empty maps
        if [[ -s /workspace/build_env.yaml ]] && grep -q '^[A-Z_][A-Z0-9_]*:' /workspace/build_env.yaml; then
          echo "Deploying with build environment variables..."
          echo "Environment variables to be used:"
          cat /workspace/build_env.yaml
          gcloud run deploy ${_SERVICE_NAME} \
            --source . \
            --region ${_REGION} \
            --platform managed \
            --port 8080 \
            --memory ${_MEMORY} \
            --cpu ${_CPU} \
            --min-instances ${_MIN_INSTANCES} \
            --max-instances ${_MAX_INSTANCES} \
            --timeout 3600 \
            --build-env-vars-file /workspace/build_env.yaml
        else
          echo "Deploying without build environment variables..."
          echo "No environment variables found or file contains only empty map"
          gcloud run deploy ${_SERVICE_NAME} \
            --source . \
            --region ${_REGION} \
            --platform managed \
            --port 8080 \
            --memory ${_MEMORY} \
            --cpu ${_CPU} \
            --min-instances ${_MIN_INSTANCES} \
            --max-instances ${_MAX_INSTANCES} \
            --timeout 3600
        fi

# Substitution variables with defaults
# These can be overridden in the Cloud Build trigger settings
substitutions:
  _SERVICE_NAME: 'nextjs-cloud-run-deploy'
  _REGION: 'europe-west1'
  _MEMORY: '1Gi'
  _CPU: '1'
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '10'

# Build timeout (important for Next.js builds)
timeout: '1200s'



options:
  logging: CLOUD_LOGGING_ONLY
